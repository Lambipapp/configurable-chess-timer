go.property("gui_url", msg.url())


local function create_player(self)
	return {
		moves = 0,
		timer = self.timer_time
	}
end


local function set_paused(self, paused)
	self.paused = paused
	msg.post(".", hash("set_paused"), {paused = paused})
end

local function setup(self)
	self.players = {}

	table.insert(self.players, create_player(self))
	table.insert(self.players, create_player(self))

	set_paused(self, true)
	self.over = false
	self.active_player = nil
	
end

function init(self)
	self.default_time = 300
	self.default_increment = 0
	self.timer_time = self.default_time
	self.increment_time = self.default_increment

	setup(self)

	msg.post(".", hash("set_values"), {timer_text = self.timer_time})
end


function update(self, dt)
	if self.active_player then
		if not self.paused then
			
			self.players[self.active_player].timer = self.players[self.active_player].timer - dt
			local timer = self.players[self.active_player].timer 
			if timer > 0 then
				msg.post(".", hash("update_timer"), {player = self.active_player, time = timer})
			else
				msg.post(".", hash("game_over"), {player = self.active_player, time = timer})
				set_paused(self, true)
				self.over = true
			end
		else
		end
	end
end

local function manage_timers(self, last_player, first_action)
	self.players[self.active_player].moves = self.players[self.active_player].moves + 1
	if not first_action then
		self.players[last_player].timer = self.players[last_player].timer + self.increment_time
	end
	msg.post(".", hash("update_timer"), {player = last_player, time = self.players[last_player].timer})
	msg.post(".", hash("update_moves"), {player = last_player, moves = self.players[last_player].moves})
end

local function timer_pressed(self, message)
	if self.over then
		msg.post(".", hash("reset"))
	end
	local first_action = self.active_player == nil
	if message.player == 1 then
		if self.active_player == 2 then
		else
			self.active_player = 2
			manage_timers(self, message.player, first_action)
		end
		
	else
		if self.active_player == 1 then
		else
			self.active_player = 1
			manage_timers(self, message.player, first_action)
		end
	end
	set_paused(self, false)
end

function on_message(self, message_id, message, sender)
	if message_id == hash("set_timer_value") then
		self.timer_time = message.timer_time
		
	elseif message_id == hash("set_increment_value") then
		self.increment_time = message.increment_time

	elseif message_id == hash("timer_pressed") then
		timer_pressed(self, message)

	elseif message_id == hash("pause_play") then
		if message.paused then
			set_paused(self, message.paused)
		else
			set_paused(self, not self.paused)
		end 

	
	elseif message_id == hash("update_settings") then
		self.timer_time = message.time
		self.increment_time = message.increment
		setup(self)
		msg.post(".", hash("set_values"), {timer_text = self.timer_time})

	elseif message_id == hash("reset") then
		setup(self)
		msg.post(".", hash("set_values"), {timer_text = self.timer_time})

	elseif message_id == hash("get_settings") then
		msg.post(".", hash("provide_settings"), {timer_time = self.timer_time, increment = self.increment_time, default_time = self.default_time, default_increment = self.default_increment})
	end
end
